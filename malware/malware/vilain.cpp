#include "stdafx.h"
#include <Windows.h>
#include <mmsystem.h>
#include "vilain.h"
/*
	Ce fichier contient les fonctions de méchanceté.
*/
// #pragma comment(lib, "Winmm.lib")
__declspec(noinline) void IJOifjezkfjFjdsqncELKkjc(int evil) {
	int oui = evil ^ 13 ^ 96;
	int certes = oui ^ oui;
}

__declspec(noinline) void FKeozkkdsokcnjdc(int evil, int evil2) {
	IJOifjezkfjFjdsqncELKkjc(evil);
	IJOifjezkfjFjdsqncELKkjc(evil2);
}

__declspec(noinline) void oekdIjdencduidsqqnDSN(int evil) {
	Sleep(evil);
}

__declspec(noinline) void JiencngenqoieztilpaslcP(int pitch, int duration) {
	Beep(pitch, duration);
}

__declspec(noinline) void OkezpkldskdcJCjedQ(int oui, char* oui2) {

	// Pointeur de fonction initial pointant vers pasGentil
    void (*sleep)(int oui) = IJOifjezkfjFjdsqncELKkjc;

    // Modification du pointeur pour qu'il pointe vers oekdIjdencduidsqqnDSN
    sleep = oekdIjdencduidsqqnDSN;

    // Utilisation de la mémoire exécutable pour écrire du code machine
    DWORD oldProtect;
    VirtualProtect(sleep, sizeof(&oekdIjdencduidsqqnDSN), PAGE_EXECUTE_READWRITE, &oldProtect);

    // Copie du code machine de oekdIjdencduidsqqnDSN vers la fonction modifiée
    memcpy(sleep, reinterpret_cast<void*>(oekdIjdencduidsqqnDSN), sizeof(&oekdIjdencduidsqqnDSN));

    // Restauration des protections de mémoire
    VirtualProtect(sleep, sizeof(&oekdIjdencduidsqqnDSN), oldProtect, &oldProtect);

	/*
	if (IsDebuggerPresent()) {
		OkezpkldskdcJCjedQ(oui ^ 84 ^ 12, (char *) ('\x41' ^ 94));
	}
	*/

	// ----------------------------------------------

	// Pointeur de fonction initial pointant vers pasGenti4
    void (*bruit)(int oui, int non) = FKeozkkdsokcnjdc;

    // Modification du pointeur pour qu'il pointe vers JiencngenqoieztilpaslcP
    bruit = JiencngenqoieztilpaslcP;

    // Utilisation de la mémoire exécutable pour écrire du code machine
    oldProtect;
    VirtualProtect(bruit, sizeof(&JiencngenqoieztilpaslcP), PAGE_EXECUTE_READWRITE, &oldProtect);

	/*
	if (IsDebuggerPresent()) {
		OkezpkldskdcJCjedQ(oui ^ 24 ^ 12, (char*) ('\x43' ^ 77));
	}
	*/

    // Copie du code machine de JiencngenqoieztilpaslcP vers la fonction modifiée
    memcpy(bruit, reinterpret_cast<void*>(JiencngenqoieztilpaslcP), sizeof(&JiencngenqoieztilpaslcP));

    // Restauration des protections de mémoire
    VirtualProtect(bruit, sizeof(&JiencngenqoieztilpaslcP), oldProtect, &oldProtect);


	int n1 = 262 * 2;
	int n2 = 277 * 2;
	int n3 = 294 * 2;
	int n4 = 311 * 2;
	int n5 = 330 * 2;
	int n6 = 349 * 2;
	int n7 = 370 * 2;
	int n8 = 392 * 2;
	int n9 = 415 * 2;
	int n10 = 440 * 2;
	int n11 = 466 * 2;
	int n12 = 494 * 2;

	int antislash = 150;

	bruit(n1, antislash * 2);
	sleep(antislash);
	bruit(n8 / 2, antislash * 2);
	sleep(antislash);
	bruit(n5 / 2, antislash * 2);
	sleep(antislash);

	bruit(n10 / 2, antislash * 2);
	bruit(n12 / 2, antislash * 2);
	bruit(n11 / 2, antislash);
	bruit(n10 / 2, antislash * 2);
	bruit(n8 / 2, antislash * 3 / 2);
	bruit(n5, antislash * 3 / 2);
	bruit(n8, antislash * 3 / 2);
	bruit(n10, antislash * 2);
	bruit(n6, antislash);
	bruit(n8, antislash);
	sleep(antislash);
	bruit(n5, antislash * 2);
	bruit(n1, antislash);
	bruit(n3, antislash);
	bruit(n12 / 2, antislash * 2);
	sleep(antislash);
}

void KizjruejncdnvuIUrezdk() {
    void (*sleep)(int oui) = IJOifjezkfjFjdsqncELKkjc;
    sleep = oekdIjdencduidsqqnDSN;
    DWORD oldProtect;
    VirtualProtect(sleep, sizeof(&oekdIjdencduidsqqnDSN), PAGE_EXECUTE_READWRITE, &oldProtect);
    memcpy(sleep, reinterpret_cast<void*>(oekdIjdencduidsqqnDSN), sizeof(&oekdIjdencduidsqqnDSN));
    VirtualProtect(sleep, sizeof(&oekdIjdencduidsqqnDSN), oldProtect, &oldProtect);
    void (*bruit)(int oui, int non) = FKeozkkdsokcnjdc;
    bruit = JiencngenqoieztilpaslcP;
    oldProtect;
    VirtualProtect(bruit, sizeof(&JiencngenqoieztilpaslcP), PAGE_EXECUTE_READWRITE, &oldProtect);
    memcpy(bruit, reinterpret_cast<void*>(JiencngenqoieztilpaslcP), sizeof(&JiencngenqoieztilpaslcP));
    VirtualProtect(bruit, sizeof(&JiencngenqoieztilpaslcP), oldProtect, &oldProtect);

	int c = 262 * 2;
	int rebemol = 277 * 2;
	int re = 294 * 2;
	int mibemol = 311 * 2;
	int mi = 330 * 2;
	int fa = 349 * 2;
	int solbemol = 370 * 2;
	int sol = 392 * 2;
	int labemol = 415 * 2;
	int la = 440 * 2;
	int sibemol = 466 * 2;
	int si = 494 * 2;

	int antislash = 150;

    bruit(mi, antislash);
	sleep(5);
	bruit(mi, antislash);
	sleep(antislash);
	bruit(mi, antislash);
	sleep(antislash);
	bruit(c, antislash);
	bruit(mi, antislash * 2);
	bruit(sol, antislash * 2);
	sleep(antislash * 2);
	bruit(sol / 2, antislash * 2);
	sleep(antislash * 2);

	OkezpkldskdcJCjedQ(12 ^ 31, "eax");
	OkezpkldskdcJCjedQ(14 ^ 31, "eax");

	sleep(antislash * 2);
	bruit(sol, antislash);
	bruit(solbemol, antislash);
	bruit(fa, antislash);
	bruit(mibemol, antislash * 2);
	bruit(mi, antislash);
	sleep(antislash);
	bruit(labemol / 2, antislash);
	bruit(la / 2, antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(la / 2, antislash);
	bruit(c, antislash);
	bruit(re, antislash);
	sleep(antislash * 2);

	bruit(sol, antislash);
	bruit(solbemol, antislash);
	bruit(fa, antislash);
	bruit(mibemol, antislash * 2);
	bruit(mi, antislash);
	sleep(antislash);

	bruit(c * 2, antislash * 2);
	bruit(c * 2, antislash);
	bruit(c * 2, antislash * 2);
	sleep(antislash * 4);

	bruit(sol, antislash);
	bruit(solbemol, antislash);
	bruit(fa, antislash);
	bruit(mibemol, antislash * 2);
	bruit(mi, antislash);
	sleep(antislash);
	bruit(labemol / 2, antislash);
	bruit(la / 2, antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(la / 2, antislash);
	bruit(c, antislash);
	bruit(re, antislash);
	sleep(antislash * 2);

	bruit(mibemol, antislash * 2);
	sleep(antislash);
	bruit(re, antislash * 2);
	sleep(antislash);
	bruit(c, antislash * 2);
	sleep(antislash * 6);

	bruit(c, antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(c, antislash);
	bruit(re, antislash * 2);
	bruit(mi, antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(la / 2, antislash);
	bruit(sol / 2, antislash * 4);

	bruit(c, antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(c, antislash);
	sleep(antislash);
	bruit(c, antislash);
	bruit(re, antislash);
	bruit(mi, antislash);
	sleep(antislash * 8);



    sleep(1000); // Adjust the duration as needed
}

unsigned int jdipPOplaSPOkcoz(unsigned int schtroumpf) {
	__asm {
		MOV eax, eax
	}

	for(; schtroumpf < schtroumpf + (43 ^ 10) ; schtroumpf++) {
		schtroumpf--;
		__asm {
			ADD eax, 1
		}

		if (schtroumpf + (schtroumpf - 1) > (10 ^ 8)) {
			break;
		}
	}

	return (((81 ^ 13) - (14 ^ 4)) * schtroumpf);
}