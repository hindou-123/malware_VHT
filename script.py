```py
import random
from typing import List

def get_random_condition():

    conditions = [
        "true",
        "1 < 4",
        "71 - 31 > 1",
        "(79 ^ 11) > 0",
    ]

    return random.choice(conditions)

class GeneratedFunction:
    def __init__(self, name, return_type, parameters):
        self.name = name
        self.return_type = return_type
        self.parameters = parameters

    def generate_call(self):
        if self.parameters:
            call_parameters = ', '.join([param.generate_value() for param in self.parameters])
            return f'{self.name}({call_parameters});'
        else:
            return f'{self.name}();'
        
def generate_name():
    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(random.randint(10, 32)))

class Parameter:
    def __init__(self, type_):
        self.type = type_

    def generate_value(self):
        if self.type == 'int':
            return str(random.randint(1, 100))
        elif self.type == 'double':
            return str(random.uniform(1.0, 100.0))
        elif self.type == 'char':
            return f'\'{random.choice("abcdefghijklmnopqrstuvwxyz")}\''
        else:
            return ""

def generate_random_function(existing_functions: List[GeneratedFunction]):
    function_name = generate_name()
    return_type = random.choice(['int', 'double', 'char', 'void'])
    
    # For simplicity, we are not using parameters in the generated functions
    parameters = [Parameter(random.choice(['int', 'double', 'char'])) for _ in range(random.randint(0, 3))]

    num_calls = random.randint(0, min(5, len(existing_functions)))
    functions_chosen = [random.choice(existing_functions) for _ in range(num_calls)]
    call_code = '\n\t\t\t'.join([chosen.generate_call() for chosen in functions_chosen])

    check_debugger_present = random.randint(0, 2)
    debugger_check_code = "if (IsDebuggerPresent()) {jul();}" if check_debugger_present == 1 else ""

    return_code = Parameter(return_type).generate_value() 

    code = f'''
    {return_type} {function_name}({', '.join([f'{param.type} param{i}' for i, param in enumerate(parameters)])}) {{
        if ({get_random_condition()}) {{
            {call_code}
        }}
        {debugger_check_code}
        return {return_code};
    }}
    '''

    return GeneratedFunction(function_name, return_type, parameters), code

def main():
    num_functions = 100000

    generated_functions = []

    for _ in range(num_functions):
        generated_function, code = generate_random_function(generated_functions)
        generated_functions.append(generated_function)
        with open("confuse.c", "a") as f:
            f.write(code + "\n")

    for generated_function in generated_functions: 
        with open("confuse.h", "a") as f:
            f.write(f"{generated_function.return_type} {generated_function.name}({', '.join([f'{param.type} param{i}' for i, param in enumerate(generated_function.parameters)])});")

if __name__ == "__main__":
    main()
```